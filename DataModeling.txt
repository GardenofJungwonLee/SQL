Data Modeling

 '모델'이라는 말은 다양한 방면에서 쓰이지만 컴퓨터 공학에서는 '어떤 목적을 가지고 진짜를 모방한다'는 뜻으로 쓰인다. 그렇기 때문에 목적에 부합하는 모방이 좋은 모델이 된다.
그 중에서도 데이터 모델링은 복잡한 데이터를 컴퓨터에서 구현하도록 하는 것이다. 좋은 모델링을 하기 위한 여러 방법이 있지만 여기서는 다음의 방법을 소개한다.

1. 업무파악 -> 2. 개념적 데이터 모델링->3. 논리적 데이터 모델링->4. 물리적 데이터 모델링

1. 업무 파악
 모델링을 하려면 모델링을 하려는 업무를 파악해야 한다. 업무 파악이란 문제 해결을 위한 문제 파악과 앞으로의 방향성 계획을 의미한다.
컴퓨터 공학의 문제란 컴퓨터 자체의 문제를 해결할 수도 있지만 현실의 문제를 할 수도 있다. 이 현실 문제 해결의 첫발이 업무 파악이다.
이 때, 한 사람이 혼자 생각해서 기획과 구현을 다할 때와 실무자와 기획자가 구분될 때로 나뉘는데 후자의 경우, 전자보다 상호간에 커뮤니케이션이 중요하다. 
잦은 교류와 커뮤니케이션이 이루어져야 구체적이고 실현 가능한 목표를 합의할 수 있다. 소통을 좀 더 수월하게 하는 방법 중 하나는 함께 UI를 그리는 것이다.

cf. UI란
  -User interface : 사용자가 기계를 작동할 때 사용하는 여러 조작 장치들

2. 개념적 데이터 모델링
 업무 파악이 끝나면 다음으로 해야할 것은 개념적 데이터 모델링이다.
개념적 데이터 모델링은 두가지 효용을 제공한다. 첫번째는 현실에서 개념을 추출하는 필터를 제공하는 것이고 두번째는 개념에 대해서 다른 사람들과 대화하게 해주는 언어로서 작용한다는 것이다. 
데이터 모델링에 들어갈 때 알아야 하는 것이 ERD(Entity Relation Diagram)이다. 
앞서 말한 효용들을 사용하게 해주는 유용한 도구인데 크게 세가지 특징을 가지고 있다. 
첫째, 연관된 정보를 그룹핑해서 인식하고 다른 사람에게 표현할 수 있게 해준다.
둘째, 정보 그룹사이에 관계를 인식하고 다른 사람에게 표현 할 수 있게 해준다. 셋째, 표로 전환하기 쉽다.
주의 할 것은 설명가능하고 모순 없는 관계형 데이터 베이스를 그려야 한다는 것이다.
RDB는 내포관계를 허용하지 않기 때문에 일단 표를 만들고 정리하여야 한다. 그러면 그룹핑이 편해지고 컴퓨터 자원을 아끼면서 조인하기 편한 방향으로 그릴 수 있다.
 
개념적 모델링을 ERD에서는 Entity라고 부른다. 
Entity 안에 담겨 있는 속성들은 Attribute라 부르고 관계(Relation)로서 연관성을 표현해준다.
다음의 것들은 표에서 다음과 같이 구현된다.

 Entity -> Table
 Attribute -> column
 Relation -> PK, FK
 Tuple -> Row

3. 속성정의
업무 파악에서 여기까지만 살펴보아도 사용자가 마주하는 UI와 컴퓨터에 저장되는 data는 인과 관계에 있다는 것을 알 수 있다.
때문에 때문에 기획자와 구현자가 다르다면 최소한 데이터 모델링까지는 함께하는 것이 이상적이다.
함께 기획서에서 Entity를 찾아내는 것이다. (기획서를 쓰는 입장에서 판단하면 Entity를 찾기에 유리하다)

4. Entity 중 대표 속성 정하기: Identifier(식별자)정하기
Identifier는 원하는 데이터를 정확하게 식별하게하는 속성을 말한다. 예를 들자면 한 사람당 하나밖에 없고 또 유일한 주민등록번호 같은 것을 말한다.
그러한 key의 종류로는 다음이 있다.
식별자가 될 수 있는 후보군 : 후보키(candidate key)
식별자로 정한 키 = 기본키(primary key)
기본키가 아닌 것은 대체키(alternate key:성능 향상을 위한 secondary index걸기 좋음)
두 가지를 합쳐서 식별하는 것을 중복키(composite key)
식별자를 만들만한 게 없을 때는 인조적으로 대리키를 만든다. (시퀸스나 오토인크리먼트로 일련번호를 만드는 방식을 사용하기도 함)
 
5. Cardinality
 Cardinality란 엔티티 간에 관계를 설명하는 Tuple의 수를 의미한다. Entity가 항상 참여하는 가 아닌가에 따라 Mandatory나 Optionality로 나누는데
꼭 필요한 경우는 Mandatory, 그렇지 않은 경우에는 Optionality라고 한다.
예시)
Madatory -|---- O- Optionality

6. Mapping rule 
Mapping rule이란 ER다이어그램에 표현한 내용을 관계형 데이터에 맞는 형식으로 전환할때 사용하는 방법론이다.
Entity는 table로 Attribute는 colum으로 Relation는 PK, FK로 표현한다. Maping table을 작성하면 두가지 table이 결합되어 쓸 때 의미가 있는 정보를 추가할 수 있다.

7.
PK, FK를 만들때 중요한것은 Cardinality를 생각하는것이다.
관계는 1:1에서 1:n, n:n, n:m 순서로 하는 것이 유리하다.

8. Normalization(정규화)
에드가 프랑크 커드 박사는 평범한 사람도 좋은 표를 만들 수 있게 Normalization(정규화)라는 것을 만들었다.
Unnormalized relation을 계속해서 정규형으로 바꾸면서 관계형 데이터베이스에 걸맞는 모형으로 바꾸는 방식이다.
정규화에는 여러 원칙들이 있는데 다음의 세가지 원칙들이 가장 기본적 원칙이다.
(1) 제1 정규화의 원칙
각각의 행,컬럼들이 Atimic columns(원자적)여야 한다

(2) 제2 정규화의 원칙
No partial dependencies 즉, 부분 종속성이 없어야된다 부분 종속성이 생기면 중복이 많이 일어난다 

(3) 제3 정규화의 원칙
No transitive dependencies(이행적 종속성)을 제거해야 한다.

9.물리적 데이터 모델링
논리적 모델링이 관계형 데이터베이스에 맞는 이상적 표를 만드는 것이라면 물리적 데이터 모델링은 이상적인 표를 구체적인 제품에 맞는 현실적인 표로 만드는 것이다. 때문에 성능이 중요하다
find slow query를 통하여 병목현상이 발생하는 지점을 찾는 것은 debormalization(역정규화)라고 부르는데 위험하기 때문에 다른 방법도 고려해야한다.
Index 행에 대한 성능 비약적으로 강화시키지만 쓰기기능을 약화시키기 때문이다. 입력된 정보를 잘 정리정돈하는 전산과정이 시간도 걸리고 저장공간도 많이 차지한다.
Application에서 cash방법을 사용할 수도 있다. 저장해둔 결과 사용을 통해서 데이터베이스의 부하를 획기적으로 줄여주는 것이다.



참고: 생활코딩 관계형 데이터 모델링